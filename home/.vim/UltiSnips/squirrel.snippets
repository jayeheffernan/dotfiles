snippet heartbeat "Add a heartbeat function/loop" b
function __heartbeat() {
	server.log("bip");
	imp.wakeup(${1:5}, __heartbeat);
}
__heartbeat();
endsnippet

snippet {
{
	$0
}
endsnippet

snippet	mr "math.rand" w
math.rand()$0
endsnippet

# Function
snippet fun "function definition" wm
function ${1:function_name}(${2}) {
	${0}
}
endsnippet

# Anonymous Function
snippet f "anon function" wm
function(${1}) {
	${0}
}
endsnippet

snippet fb "anon function, bound" wm
function(${1}) {
	${0}
}.bindenv(${2:this})
endsnippet

snippet .b "bindenv" i
.bindenv(${1:this})
endsnippet

snippet if
if (${1:true}) {
	${VISUAL}${0}
}
endsnippet

# Else if
snippet elif
else if (${1:true}) {
	${0}
}
endsnippet

# Else
snippet e
else {
	${0}
}
endsnippet

# if ... else
snippet ife
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

# case
snippet case
case '${1:case}':
	${2}
	break;
${0}
endsnippet

# try
snippet try
try {
	${VISUAL}${1}
} catch (${2:e}) {
	${0:/* handle error */}
}
endsnippet

snippet tryd "try debug"
try {
	${VISUAL}${1}
} catch (error) {
	server.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` error: :::" + (error) + "::: is a " + typeof (error));
	throw error;
}
endsnippet

snippet sl "server.log" w
server.log($0);
endsnippet

snippet se "server.error" w
server.error($0);
endsnippet

snippet sls "server.log string" w
server.log("$0");
endsnippet

snippet ses "server.error string" w
server.error("$0");
endsnippet

snippet slf "server.log format" w
server.log(format("$1"$0));
endsnippet

snippet sef "server.error format" w
server.error(format("$1"$0));
endsnippet

snippet sld "server.log debug" w
server.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` $1: :::" + (${1}) + "::: is a " + typeof ($1));
endsnippet

snippet slds "server.log debug string" w
server.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` ${1}");
endsnippet

snippet slde "server.log debug empty" w
server.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`");
endsnippet

snippet sed "server.log debug" w
server.error("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` $1: :::" + ${1} + "::: is a " + typeof $1);
endsnippet
snippet br "breadcrumb" w
_breadcrumbs.push("`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`"); _breadcrumbs.remove(0);
endsnippet
snippet slms "server.log memory short" w
server.log(format("MEM %7d (%4dk) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    $0", imp.getmemoryfree(), imp.getmemoryfree()/1000));
endsnippet
snippet slm "server.log memory detailed" w
::__memnote <- "$0"; ::__mem <- imp.getmemoryfree(); ::__memd <- "__memp" in ::getroottable() ? (::__mem - ::__memp) : 0; server.log(format("MEM %7d (%7s), %4dk (%7sk) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    %s", ::__mem, format("%+d", ::__memd), ::__mem/1000, format("%+5.2f", ::__memd/1000.0), ::__memnote)); ::__memp <- ::__mem;
endsnippet
snippet le "logger.error" w
logger.error($0);
endsnippet
snippet ll "logger.log" w
logger.log($0);
endsnippet
snippet lls "logger.log" w
logger.log("$0");
endsnippet

snippet llf "logger.log format" w
logger.log(format("$1"$0));
endsnippet

snippet llp "logger.log pformat" w
logger.log(pformat($0));
endsnippet

snippet lld "logger.log debug" w
logger.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` $1: :::" + (${1}) + "::: is a " + typeof ($1));
endsnippet

snippet llds "logger.log debug string" w
logger.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` ${1}");
endsnippet

snippet llde "logger.log debug empty" w
logger.log("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`");
endsnippet

snippet led "logger.log debug" w
logger.error("debuggg `!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]` $1: :::" + ${1} + "::: is a " + typeof $1);
endsnippet
snippet llms "logger.log memory short" w
logger.log(format("MEM %7d (%4dk) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    $0", imp.getmemoryfree(), imp.getmemoryfree()/1000));
endsnippet
snippet llm "logger.log memory detailed" w
::__memnote <- "$0"; ::__mem <- imp.getmemoryfree(); ::__memd <- "__memp" in ::getroottable() ? (::__mem - ::__memp) : 0; logger.log(format("MEM %7d (%7s), %4dk (%7sk) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    %s", ::__mem, format("%+d", ::__memd), ::__mem/1000, format("%+5.2f", ::__memd/1000.0), ::__memnote)); ::__memp <- ::__mem;
endsnippet
snippet llt "logger.log time detailed" w
::__timenote <- "$0"; ::__time <- hardware.millis(); ::__timed <- "__timep" in ::getroottable() ? (::__time - ::__timep) : 0; logger.log(format("TIME %7d (%7s), %4ds (%7ss) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    %s", ::__time, format("%+d", ::__timed), ::__time/1000000, format("%+5.2f", ::__timed/1000000.0), ::__timenote)); ::__timep <- ::__time;
endsnippet

snippet slt "server.log time detailed" w
::__timenote <- "$0"; ::__time <- hardware.millis(); ::__timed <- "__timep" in ::getroottable() ? (::__time - ::__timep) : 0; server.log(format("TIME %7d (%7s), %4ds (%7ss) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    %s", ::__time, format("%+d", ::__timed), ::__time/1000000, format("%+5.2f", ::__timed/1000000.0), ::__timenote)); ::__timep <- ::__time;
endsnippet

snippet note "note time and memory" b
::__note <- format("$0"); ::__mem <- imp.getmemoryfree(); ::__memd <- "__memp" in ::getroottable() ? (::__mem - ::__memp) : 0; ::__time <- hardware.millis(); ::__timed <- "__timep" in ::getroottable() ? (::__time - ::__timep) : 0; logger.log(format("TIME %7d (%7s), %4ds (%7ss) MEM %7d (%7s), %4dk (%7sk) (`!p import uuid; snip.rv = snip.c if snip.c else uuid.uuid4().get_hex()[:4]`)    %s", ::__time, format("%+d", ::__timed), ::__time/1000000, format("%+5.2f", ::__timed/1000000.0), ::__mem, format("%+d", ::__memd), ::__mem/1000, format("%+5.2f", ::__memd/1000.0), ::__note)); ::__timep <- ::__time; ::__memp <- ::__mem; 
endsnippet

snippet /** "Description" b
/**
 * ${0:description}
 */
endsnippet

snippet @a "Description"
@arg {${1:type}} ${2:name} - ${0:description}
endsnippet

snippet @r "Description"
@returns {${1:type}} ${0:description}
endsnippet

snippet @s "Description"
@summary ${0:description}
endsnippet

snippet wu "imp.wakeup" w
imp.wakeup(${1:0}, $0);
endsnippet

snippet	t "TIME macro" b
TIME("${0:key}");
endsnippet

snippet	ts "TIMESTART macro" b
TIMESTART("${0:key}");
endsnippet
